/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.charset.StandardCharsets

buildscript {
  repositories {
    jcenter()
    maven { url "http://palantir.bintray.com/releases" }
  }

  dependencies {
    classpath 'gradle.plugin.com.palantir:gradle-circle-style:1.1.2'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath 'com.netflix.nebula:nebula-dependency-recommender:5.2.0'
    classpath 'com.netflix.nebula:nebula-publishing-plugin:5.1.5'
  }
}

plugins {
  id 'com.palantir.git-version' version '0.9.1'
  id 'java-gradle-plugin'
}

repositories {
  jcenter()
  maven { url "http://palantir.bintray.com/releases" }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'nebula.dependency-recommender'
version System.env.CIRCLE_TAG ?: gitVersion()
group 'org.apache.spark'

sourceCompatibility = 1.8

dependencyRecommendations {
  strategy OverrideTransitives
  propertiesFile file: project.rootProject.file('versions.props')
}

test {
  minHeapSize = "512m"
  maxHeapSize = "512m"
}

dependencies {
  compileOnly gradleApi()
  compile 'org.apache.commons:commons-compress'
  compile 'commons-io:commons-io'
  testCompile 'org.assertj:assertj-core'
  testCompile 'org.mockito:mockito-core'
  testCompile 'junit:junit'
  testCompile 'com.spotify:docker-client'
  testCompile gradleApi()
  testCompile gradleTestKit()
}

def getGitRepoRoot = { ->
  def bashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', '--show-toplevel'
    standardOutput = bashStdOut
  }
  return new String(bashStdOut.toByteArray(), StandardCharsets.UTF_8).trim()
}


task prepareDockerBundleDir(type: Sync) {
  from('src/main/dockerfiles/spark/Dockerfile') {
    into 'kubernetes/dockerfiles/spark'
    rename 'Dockerfile', 'Dockerfile.original'
  }

  from('src/main/dockerfiles/spark/entrypoint.sh') {
    into 'kubernetes/dockerfiles/spark'
  }

  from(fileTree("$getGitRepoRoot/bin")) {
    into 'bin'
  }

  from(fileTree("$getGitRepoRoot/sbin")) {
    into 'sbin'
  }

  into file("src/main/resources/docker-resources")
  includeEmptyDirs = false
}

tasks.compileJava.dependsOn tasks.prepareDockerBundleDir
tasks.idea.dependsOn tasks.prepareDockerBundleDir

apply from: "${rootDir}/gradle/publish.gradle"
